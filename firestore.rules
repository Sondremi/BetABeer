rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users Collection
    match /users/{userId} {
      allow read: if true;
      allow update: if request.auth != null && (
        request.auth.uid == userId || // User owns the document
        (
          resource.data.friends is list && // Friends array exists
          request.resource.data.friends is list && // Update includes friends array
          (
            // Allow adding auth user's UID to friends
            request.resource.data.friends.size() == resource.data.friends.size() + 1 &&
            request.resource.data.friends.hasAll(resource.data.friends) &&
            request.resource.data.friends.hasAny([request.auth.uid])
          ) || (
            // Allow removing auth user's UID from friends
            request.resource.data.friends.size() == resource.data.friends.size() - 1 &&
            resource.data.friends.hasAll(request.resource.data.friends.concat([request.auth.uid]))
          )
        )
      );
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Friend Requests Collection
    match /friendRequests/{requestId} {
      // Allow creating a friend request if authenticated and sender
      allow create: if request.auth != null 
        && request.resource.data.fromUserId == request.auth.uid
        && request.resource.data.toUserId is string
        && request.resource.data.status == 'pending';
      
      // Allow reading and listing if user is sender or receiver
      allow read, list: if request.auth != null 
        && (resource.data.fromUserId == request.auth.uid 
          || resource.data.toUserId == request.auth.uid);
      
      // Allow updating if user is the receiver and status is valid
      allow update: if request.auth != null 
        && resource.data.toUserId == request.auth.uid
        && request.resource.data.status in ['accepted', 'rejected'];
      
      // Allow deletion by sender or receiver
      allow delete: if request.auth != null && (
        resource.data.fromUserId == request.auth.uid || 
        resource.data.toUserId == request.auth.uid
      );
    }

    // Groups Collection (unchanged, included for completeness)
    match /groups/{groupId} {
      allow read: if true;
      allow write: if request.auth != null && (
        (request.resource == null && resource.data.members.hasAny([request.auth.uid])) ||
        (request.resource.data.members.hasAny([request.auth.uid]))
      );
    }

    match /group_invitations/{invitationId} {
      allow read: if request.auth != null && (
      resource.data.senderId == request.auth.uid ||
      resource.data.receiverId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      allow delete: if request.auth != null && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
    }
  }
}